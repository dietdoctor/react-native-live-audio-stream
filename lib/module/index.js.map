{"version":3,"names":["NativeModules","NativeEventEmitter","Platform","PermissionsAndroid","VoiceStream","NativeVoiceStream","EventEmitter","eventKey","init","options","start","stop","listen","event","callback","Error","removeAllListeners","addListener","checkMicrophonePermission","OS","granted","check","PERMISSIONS","RECORD_AUDIO","error","requestMicrophonePermission","request","RESULTS","GRANTED"],"sources":["index.ts"],"sourcesContent":["// @ts-ignore\nimport { NativeModules, NativeEventEmitter, EmitterSubscription, Platform, PermissionsAndroid } from 'react-native';\nimport { VoiceStreamerInterface, VoiceStreamNativeModule, VoiceStreamOptions } from './types';\n\nconst { VoiceStream: NativeVoiceStream } = NativeModules as {\n  VoiceStream: VoiceStreamNativeModule;\n};\n\nconst EventEmitter = new NativeEventEmitter(NativeVoiceStream);\nconst eventKey: 'data' = 'data';\n\nconst VoiceStream: VoiceStreamerInterface = {\n  init: (options: VoiceStreamOptions): Promise<void> => {\n    return NativeVoiceStream.init(options);\n  },\n\n  start: (): Promise<void> => {\n    return NativeVoiceStream.start();\n  },\n\n  stop: (): Promise<void> => {\n    return NativeVoiceStream.stop();\n  },\n  \n  listen: (event: 'data', callback: (data: string) => void): EmitterSubscription => {\n    if (event !== eventKey) {\n      throw new Error('Invalid event');\n    }\n    EventEmitter.removeAllListeners(eventKey);\n    return EventEmitter.addListener(eventKey, callback);\n  },\n};\n\nexport const checkMicrophonePermission = async (): Promise<boolean> => {\n  if (Platform.OS === 'ios') {\n    return NativeVoiceStream.checkMicrophonePermission();\n  } else if (Platform.OS === 'android') {\n    try {\n      const granted = await PermissionsAndroid.check(\n        PermissionsAndroid.PERMISSIONS.RECORD_AUDIO\n      );\n      return granted;\n    } catch (error) {\n      return false;\n    }\n  }\n  return false;\n};\n\nexport const requestMicrophonePermission = async (): Promise<boolean> => {\n  if (Platform.OS === 'ios') {\n    return NativeVoiceStream.requestMicrophonePermission();\n  } else if (Platform.OS === 'android') {\n    try {\n      const granted = await PermissionsAndroid.request(\n        PermissionsAndroid.PERMISSIONS.RECORD_AUDIO\n      );\n      return granted === PermissionsAndroid.RESULTS.GRANTED;\n    } catch (error) {\n      return false;\n    }\n  }\n  return false;\n}\n\nexport default VoiceStream;"],"mappings":"AAAA;AACA,SAASA,aAAa,EAAEC,kBAAkB,EAAuBC,QAAQ,EAAEC,kBAAkB,QAAQ,cAAc;AAGnH,MAAM;EAAEC,WAAW,EAAEC;AAAkB,CAAC,GAAGL,aAE1C;AAED,MAAMM,YAAY,GAAG,IAAIL,kBAAkB,CAACI,iBAAiB,CAAC;AAC9D,MAAME,QAAgB,GAAG,MAAM;AAE/B,MAAMH,WAAmC,GAAG;EAC1CI,IAAI,EAAGC,OAA2B,IAAoB;IACpD,OAAOJ,iBAAiB,CAACG,IAAI,CAACC,OAAO,CAAC;EACxC,CAAC;EAEDC,KAAK,EAAEA,CAAA,KAAqB;IAC1B,OAAOL,iBAAiB,CAACK,KAAK,CAAC,CAAC;EAClC,CAAC;EAEDC,IAAI,EAAEA,CAAA,KAAqB;IACzB,OAAON,iBAAiB,CAACM,IAAI,CAAC,CAAC;EACjC,CAAC;EAEDC,MAAM,EAAEA,CAACC,KAAa,EAAEC,QAAgC,KAA0B;IAChF,IAAID,KAAK,KAAKN,QAAQ,EAAE;MACtB,MAAM,IAAIQ,KAAK,CAAC,eAAe,CAAC;IAClC;IACAT,YAAY,CAACU,kBAAkB,CAACT,QAAQ,CAAC;IACzC,OAAOD,YAAY,CAACW,WAAW,CAACV,QAAQ,EAAEO,QAAQ,CAAC;EACrD;AACF,CAAC;AAED,OAAO,MAAMI,yBAAyB,GAAG,MAAAA,CAAA,KAA8B;EACrE,IAAIhB,QAAQ,CAACiB,EAAE,KAAK,KAAK,EAAE;IACzB,OAAOd,iBAAiB,CAACa,yBAAyB,CAAC,CAAC;EACtD,CAAC,MAAM,IAAIhB,QAAQ,CAACiB,EAAE,KAAK,SAAS,EAAE;IACpC,IAAI;MACF,MAAMC,OAAO,GAAG,MAAMjB,kBAAkB,CAACkB,KAAK,CAC5ClB,kBAAkB,CAACmB,WAAW,CAACC,YACjC,CAAC;MACD,OAAOH,OAAO;IAChB,CAAC,CAAC,OAAOI,KAAK,EAAE;MACd,OAAO,KAAK;IACd;EACF;EACA,OAAO,KAAK;AACd,CAAC;AAED,OAAO,MAAMC,2BAA2B,GAAG,MAAAA,CAAA,KAA8B;EACvE,IAAIvB,QAAQ,CAACiB,EAAE,KAAK,KAAK,EAAE;IACzB,OAAOd,iBAAiB,CAACoB,2BAA2B,CAAC,CAAC;EACxD,CAAC,MAAM,IAAIvB,QAAQ,CAACiB,EAAE,KAAK,SAAS,EAAE;IACpC,IAAI;MACF,MAAMC,OAAO,GAAG,MAAMjB,kBAAkB,CAACuB,OAAO,CAC9CvB,kBAAkB,CAACmB,WAAW,CAACC,YACjC,CAAC;MACD,OAAOH,OAAO,KAAKjB,kBAAkB,CAACwB,OAAO,CAACC,OAAO;IACvD,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACd,OAAO,KAAK;IACd;EACF;EACA,OAAO,KAAK;AACd,CAAC;AAED,eAAepB,WAAW","ignoreList":[]}
{"version":3,"names":["_reactNative","require","VoiceStream","NativeModules","EventEmitter","NativeEventEmitter","eventKey","VoiceStreamer","init","options","start","stop","listen","event","callback","Error","removeAllListeners","addListener","checkMicrophonePermission","Platform","OS","granted","PermissionsAndroid","check","PERMISSIONS","RECORD_AUDIO","error","requestMicrophonePermission","request","RESULTS","GRANTED","_default","exports","default"],"sources":["index.ts"],"sourcesContent":["// @ts-ignore\nimport { NativeModules, NativeEventEmitter, EmitterSubscription, Platform, PermissionsAndroid } from 'react-native';\nimport { VoiceStreamerInterface, VoiceStreamNativeModule, VoiceStreamOptions } from './types';\n\nconst { VoiceStream } = NativeModules as {\n  VoiceStream: VoiceStreamNativeModule;\n};\n\nconst EventEmitter = new NativeEventEmitter(VoiceStream);\nconst eventKey: 'data' = 'data';\n\nconst VoiceStreamer: VoiceStreamerInterface = {\n  init: (options: VoiceStreamOptions): Promise<void> => {\n    return VoiceStream.init(options);\n  },\n\n  start: (): Promise<void> => {\n    return VoiceStream.start();\n  },\n\n  stop: (): Promise<void> => {\n    return VoiceStream.stop();\n  },\n  \n  listen: (event: 'data', callback: (data: string) => void): EmitterSubscription => {\n    if (event !== eventKey) {\n      throw new Error('Invalid event');\n    }\n    EventEmitter.removeAllListeners(eventKey);\n    return EventEmitter.addListener(eventKey, callback);\n  },\n\n  checkMicrophonePermission: async (): Promise<boolean> => {\n    if (Platform.OS === 'ios') {\n      return VoiceStream.checkMicrophonePermission();\n    } else if (Platform.OS === 'android') {\n      try {\n        const granted = await PermissionsAndroid.check(\n          PermissionsAndroid.PERMISSIONS.RECORD_AUDIO\n        );\n        return granted;\n      } catch (error) {\n        return false;\n      }\n    }\n    return false;\n  },\n\n  requestMicrophonePermission: async (): Promise<boolean> => {\n    if (Platform.OS === 'ios') {\n      return VoiceStream.requestMicrophonePermission();\n    } else if (Platform.OS === 'android') {\n      try {\n        const granted = await PermissionsAndroid.request(\n          PermissionsAndroid.PERMISSIONS.RECORD_AUDIO\n        );\n        return granted === PermissionsAndroid.RESULTS.GRANTED;\n      } catch (error) {\n        return false;\n      }\n    }\n    return false;\n  }\n};\n\nexport default VoiceStreamer;"],"mappings":";;;;;;AACA,IAAAA,YAAA,GAAAC,OAAA;AADA;;AAIA,MAAM;EAAEC;AAAY,CAAC,GAAGC,0BAEvB;AAED,MAAMC,YAAY,GAAG,IAAIC,+BAAkB,CAACH,WAAW,CAAC;AACxD,MAAMI,QAAgB,GAAG,MAAM;AAE/B,MAAMC,aAAqC,GAAG;EAC5CC,IAAI,EAAGC,OAA2B,IAAoB;IACpD,OAAOP,WAAW,CAACM,IAAI,CAACC,OAAO,CAAC;EAClC,CAAC;EAEDC,KAAK,EAAEA,CAAA,KAAqB;IAC1B,OAAOR,WAAW,CAACQ,KAAK,CAAC,CAAC;EAC5B,CAAC;EAEDC,IAAI,EAAEA,CAAA,KAAqB;IACzB,OAAOT,WAAW,CAACS,IAAI,CAAC,CAAC;EAC3B,CAAC;EAEDC,MAAM,EAAEA,CAACC,KAAa,EAAEC,QAAgC,KAA0B;IAChF,IAAID,KAAK,KAAKP,QAAQ,EAAE;MACtB,MAAM,IAAIS,KAAK,CAAC,eAAe,CAAC;IAClC;IACAX,YAAY,CAACY,kBAAkB,CAACV,QAAQ,CAAC;IACzC,OAAOF,YAAY,CAACa,WAAW,CAACX,QAAQ,EAAEQ,QAAQ,CAAC;EACrD,CAAC;EAEDI,yBAAyB,EAAE,MAAAA,CAAA,KAA8B;IACvD,IAAIC,qBAAQ,CAACC,EAAE,KAAK,KAAK,EAAE;MACzB,OAAOlB,WAAW,CAACgB,yBAAyB,CAAC,CAAC;IAChD,CAAC,MAAM,IAAIC,qBAAQ,CAACC,EAAE,KAAK,SAAS,EAAE;MACpC,IAAI;QACF,MAAMC,OAAO,GAAG,MAAMC,+BAAkB,CAACC,KAAK,CAC5CD,+BAAkB,CAACE,WAAW,CAACC,YACjC,CAAC;QACD,OAAOJ,OAAO;MAChB,CAAC,CAAC,OAAOK,KAAK,EAAE;QACd,OAAO,KAAK;MACd;IACF;IACA,OAAO,KAAK;EACd,CAAC;EAEDC,2BAA2B,EAAE,MAAAA,CAAA,KAA8B;IACzD,IAAIR,qBAAQ,CAACC,EAAE,KAAK,KAAK,EAAE;MACzB,OAAOlB,WAAW,CAACyB,2BAA2B,CAAC,CAAC;IAClD,CAAC,MAAM,IAAIR,qBAAQ,CAACC,EAAE,KAAK,SAAS,EAAE;MACpC,IAAI;QACF,MAAMC,OAAO,GAAG,MAAMC,+BAAkB,CAACM,OAAO,CAC9CN,+BAAkB,CAACE,WAAW,CAACC,YACjC,CAAC;QACD,OAAOJ,OAAO,KAAKC,+BAAkB,CAACO,OAAO,CAACC,OAAO;MACvD,CAAC,CAAC,OAAOJ,KAAK,EAAE;QACd,OAAO,KAAK;MACd;IACF;IACA,OAAO,KAAK;EACd;AACF,CAAC;AAAC,IAAAK,QAAA,GAAAC,OAAA,CAAAC,OAAA,GAEa1B,aAAa","ignoreList":[]}